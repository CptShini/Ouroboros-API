using OuroborosLibrary.API;
using static OuroborosLibrary.SaveLoad.FilePathManager;

namespace OuroborosLibrary.SaveLoad
{
    public static class SaveDataClearer
    {
       /* /// <summary>
        /// Clears all configs generated by this program.
        /// </summary>
        public static void ClearConfigs() => DeleteFolderContents($@"{UserDataPath}", ".", 'j');

        /// <summary>
        /// Clears all playlists generated by this program.
        /// </summary>
        public static void ClearPlaylists()
        {
            DeleteFolderContents($@"{OuroborosPath}#\", ".", 'b');
            DeleteFolderContents($@"{OuroborosPath}Sniping\", ".", 'b');
            DeleteFolderContents($@"{OuroborosPath}Øuroboros\", ".", 'b');
        }

        /// <summary>
        /// Clears all API savedata of a given type.
        /// </summary>
        /// <param name="dataType">The type of API data to clear.</param>
        public static void ClearAPISaveData(APIDataType dataType = APIDataType.AllSaveData)
        {
            switch (dataType)
            {
                case APIDataType.AllSaveData:
                    DeleteFolderContents($@"{MainDataPath}", ".", 't');
                    break;
                case APIDataType.Leaderboards:
                    DeleteFolderContents($@"{MainDataPath}", "bGVhZGVyYm9hcm", 'R');
                    break;
                case APIDataType.LeaderboardScores:
                    DeleteFolderContents($@"{MainDataPath}", "bGVhZGVyYm9hcm", 'Q');
                    break;
                case APIDataType.Players:
                    DeleteFolderContents($@"{MainDataPath}", "cGxheWVy", 'c');
                    break;
                case APIDataType.PlayerScores:
                    DeleteFolderContents($@"{MainDataPath}", "cGxheWVy", 'L');
                    break;
            }
        }

        /// <summary>
        /// Deletes all specified content at a given path.
        /// </summary>
        /// <param name="path">The full path at which to delete the contents.</param>
        /// <param name="search">The string that is present in the name of all file to be deleted.</param>
        /// <param name="ext">The character that is present in the name of the file immediately after the occurence of the search term.</param>
        private static void DeleteFolderContents(string path, string search, char ext)
        {
            DirectoryInfo di = new DirectoryInfo(path);
            FileInfo[] files = di.GetFiles();
            foreach (FileInfo file in files)
            {
                string[] splitFileName = file.Name.Split(search);

                bool searchTermPresent = splitFileName.Length > 1; // If search term is present in file name, it will be split into more than 1 strings.
                if (!searchTermPresent) continue;

                char fileExt = splitFileName[1][0]; // Gets the char immediately after the search term.
                if (fileExt != ext) continue;

                file.Delete();
            }
        }*/
    }
}